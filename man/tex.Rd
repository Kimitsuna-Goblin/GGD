% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggd.tex.R
\name{tex}
\alias{tex}
\alias{tex.d}
\alias{tex.p}
\alias{\S4method{tex}{GGD}}
\alias{\S4method{tex.d}{GGD}}
\alias{\S4method{tex.p}{GGD}}
\title{Output TeX format}
\usage{
\S4method{tex}{GGD}(con = stdout(), sep = "\n", comma = TRUE,
         format.num = function(x) format(x),
         frac.env = c("array", "aligned", "gathered", "default"))

\S4method{tex.d}{GGD}(con = stdout(), sep = "\n", comma = TRUE,
         format.num = function(x) format(x),
         frac.env = c("array", "aligned", "gathered", "default"))

\S4method{tex.p}{GGD}(con = stdout(), sep = "\n", comma = TRUE,
         format.num = function(x) format(x),
         frac.env = c("array", "aligned", "gathered", "default"))
}
\arguments{
\item{con}{A \code{\link[base]{connection}} object or a character string
to indicate the output destination.
See 'Details' at \code{\link[base]{writeLines}}
for more information.}

\item{sep}{A character string to be written to the connection after each line
of text. See 'Details' at \code{\link[base]{writeLines}}
for more information.}

\item{comma}{A logical. If \code{TRUE}, this method writes a ',' (comma)
as a separator between each expression and a '.' (period)
at the end of the output.
If \code{FALSE}, those ',' and '.' will not be written.}

\item{format.num}{A function to format each numeric value of mean values and
standard deviations.
It should be a function with one argument for the value
to be displayed and returning a character string.}

\item{frac.env}{The TeX environment to format fractions with different heights
of numerator and denominator.
If \code{"default"}, such fractions will be formatted
in the default style of TeX, but their appearance is usually poor.
The environment which produces the most beautiful form
will depend on the TeX execution environment.}
}
\value{
An invisible \code{NULL}.
}
\description{
Outputs the TeX-formatted texts of the formulas of the probability density function
\eqn{g(x)} and the cumulative distribution function \eqn{\Psi(x)}
using \code{\link[base]{writeLines}}.
}
\details{
\subsection{Composition of outputs}{
     \code{tex} method outputs the formulas of both probability density function
     and cumulative distribution function.

     \code{tex.d} method outputs the formulas of probability density function only.

     \code{tex.p} method outputs the formulas of cumulative distribution function only.

     In these methods, the formulas are output according to \code{mix.type}
     and the number of components in \code{cmp} field, not \code{kind} or \code{kind.index}.
     That is, for example, if the \code{kind} is \code{"Normal Distribution"}
     and \code{mix.type = 2},
     \code{tex} outputs formulas of a horizontal gradational distribution.

     If \code{cmp} field has no rows, nothing is output.
 }

 \subsection{Equaled mean values or standard deviations}{
     For clarity, when all mean values or standard deviations of components are equal
     (i.e., when \code{\link[ggd]{is.eq.mean}} or \code{\link[ggd]{is.eq.sd}} method
     returns \code{TRUE}), they are displayed with '\eqn{=}' to the 1st parameter,
     like as '\eqn{\sigma_2 = \sigma_1}'.

     If only the values of some parameters are equal (e.g., only \eqn{\sigma_2} and
     \eqn{\sigma_3} are equal and \eqn{\sigma_1} is different),
     each value is displayed as '\eqn{\sigma_2 = x, \sigma_3 = x}'
     instead of '\eqn{\sigma_3 = \sigma_2}' to avoid misreading.

     Note that if the difference between the values of parameters is smaller than
     displayable number of decimal places, '\eqn{\sigma_2 = \sigma_1}' will not be displayed,
     but the same number will be displayed for each.
 }
}
\examples{
 a <- GGD$new()
 a$set.cmp( data.frame( mean = c( 0.018205, -0.011362 ),
                          sd = c( 1.131168,  0.705948 ) ),
            this.mix.type = 2 )
 a$tex()
 a$tex.d()
 a$tex.p()

 a$set.cmp( data.frame( mean = c( 1.2658, -0.5 ),
                          sd = c( 2.7,    1.206879 ) ),
            this.mix.type = 3 )
 a$tex( comma = FALSE, format.num = function(x) format(x, digits = 3) )
 a$tex.d( comma = FALSE, format.num = function(x) as.character(x) )
 a$tex.p( comma = FALSE, format.num = function(x) sprintf("\%.3f", x), frac.env = "aligned" )
}
\seealso{
\code{\link[ggd]{adjust.cmp}}, \code{\link[ggd]{tex.d}}, \code{\link[ggd]{tex.p}}
}
