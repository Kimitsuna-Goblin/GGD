% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggd.set.cmp.R
\name{set.cmp}
\alias{set.cmp}
\alias{ggd.set.cmp}
\alias{\S4method{set.cmp}{GGD}}
\title{Setting components}
\usage{
ggd.set.cmp(cmp, kind = NULL, mix.type = NULL,
         grad = c("default", "normal", "h", "v", "v2", "v3", "hv"),
         custom.d = NULL, custom.p = NULL)

\S4method{set.cmp}{GGD}(this.cmp = .self$cmp,
         this.kind = NULL, this.mix.type = NULL,
         grad = c("default", "normal", "h", "v", "v2", "v3", "hv"),
         this.custom.d = NULL, this.custom.p = NULL)
}
\arguments{
\item{cmp}{A data frame for \code{cmp} field.

                     It must have just 2 columns named \code{"mean"} and \code{"sd"},
                     and its rows must be less than or equals to 4.
                     Row names are not required.

                     The \code{mean} column represents the mean values of
                     the normal distributions of the components.

                     The \code{sd} column represents the standard deviations of
                     the normal distributions of the components.

                     Having no rows is allowed,
                     but indicating \code{NULL} or having no columns is not allowed.}

\item{kind}{A character string or a numeric value or a \code{\link[ggd]{GGD}} object
                     which indicates the kind of distribution model to be generated.

                     The matching method of \code{kind} follows that of
                     \code{objs} argument of \code{\link[ggd]{ggd.kind.index}}.
                     \code{NA} is allowed when \code{cmp} has no rows.

                     If \code{mix.type} argument or other than \code{"default"} for
                     \code{grad} argument is indicated, this argument will be ignored.}

\item{mix.type}{A numeric value represents how to mix the normal distributions.

                     The type of the distribution model and the number of rows in \code{cmp}
                     follow \code{mix.type} as:
                     \tabular{clc}{
                         \code{mix.type} \tab Distribution model     \tab Number of rows \cr
                         \code{0} \tab Normal distribution                   \tab 1 \cr
                         \code{1} \tab Mean of 2 normal distributions        \tab 2 \cr
                         \code{2} \tab Horizontal gradational distribution   \tab 2 \cr
                         \code{3} \tab Vertical gradational distribution     \tab 2 or 3 \cr
                         \code{4} \tab Horizontal-vertical gradational distribution
                                                                             \tab 4 \cr
                         \code{5} \tab Custom distribution                   \tab unlimited
                     }

                     If the number of rows in \code{cmp} argument is different from
                     the number shown above, \code{cmp} field will be
                     redundant/simplified to have the number of rows as above,
                     if possible. If not possible, an error will occur.

                     You can indicate \code{mix.type = NA} only if \code{cmp} has no rows.

                     If \code{grad} argument other than \code{"default"} is indicated,
                     this argument will be ignored.}

\item{grad}{A character string indicating the method of gradation.

                     \code{"h"} for horizontal, \code{"v"} for vertical,
                     and \code{"hv"} for horizontal-vertical.
                     The number after \code{"v"} is the number of components.
                     Numberless \code{"v"} is an alias for \code{"v2"}.

                     \code{"normal"} is for a normal distribution,
                     then also, \sQuote{\code{grad = "no"}} can be read as
                     \sQuote{no gradation}.

                     \code{"default"} is, if \code{kind} or \code{mix.type} argument
                     is given, follows it, otherwise it depends on the number of columns
                     in \code{cmp} argument. If the number of columns in cmp is \code{2},
                     the current \code{mix.type} is retained or horizontal (default) is used.}

\item{custom.d}{A function for the density function of the custom distribution.
                     This argument should be indicated if \code{kind} indicates
                     \code{"Custom Distribution"} or \code{mix.type} is \code{5}.

                     \code{NULL} retains the current \code{custom.d} field, after the default
                     (\code{function(x, cmp) dnorm(x, cmp$mean[1], cmp$sd[1])}) has been set.

                     See \sQuote{Fields} of \code{\link[ggd]{GGD-class}}
                     for more information.}

\item{custom.p}{A function for the cumulative distribution function defined by user.
                     Unlike \code{custom.d}, this argument is not required to be
                     indicated for custom distribution.

                     \code{NULL} retains the current \code{custom.p} field, after the default
                     (\code{function(x, cmp)
                            integrate(function(x) custom.d(x, cmp), -Inf, x)$value})
                     has been set.

                     See \sQuote{Fields} of \code{\link[ggd]{GGD-class}}
                     for more information.}

\item{this.cmp}{A data frame for setting into \code{cmp} field.
It is equivalent to \code{cmp} argument of \code{ggd.set.cmp}.}

\item{this.kind}{A string or a numeric value or a \code{\link[ggd]{GGD}} object
which indicates the kind of distribution model to be constructed.
It is equivalent to \code{kind} argument of \code{ggd.set.cmp}.}

\item{this.mix.type}{A numeric value represents how to mix the normal distributions.
It is equivalent to \code{mix.type} argument of \code{ggd.set.cmp}.}

\item{this.custom.d}{A function for the probability density function of
                         the custom distribution.
                         It is equivalent to \code{custom.d} argument of \code{ggd.set.cmp}.

                         \code{NULL} is allowed to retain the current \code{custom.d} field.
                         But note that a warning will occur if you retain the default for
                         a custom distribution.}

\item{this.custom.p}{A function for the cumulative distribution function defined by user.
                         It is equivalent to \code{custom.p} argument of \code{ggd.set.cmp}.

                         \code{NULL} is allowed to retain the current \code{custom.p} field.
                         Retaining the default will not cause warnings.}
}
\value{
The \code{\link[ggd]{GGD}} object itself (invisible for \code{GGD} method).

         For \code{GGD} method: If an error occurs, each value of field will not be changed.
}
\description{
Generates a \code{\link[ggd]{GGD}} object according to indicated values of \code{cmp} field
(\code{ggd.set.cmp}), or sets the values in \code{cmp} field and all of other fields
accordingly (\code{set.cmp}).
Whenever you want to set values in \code{cmp} field, it is strongly recommended to use
this method.
}
\details{
\subsection{About kind and mix.type}{
     In this function,
     unlike \code{\link[ggd]{trace.q}} and \code{\link[ggd]{nls.freq}} methods,
     \code{[this.]kind} argument is only used to determine \code{mix.type} value,
     which represents how to mix the normal distributions of the components.
     That is, \code{[this.]kind} argument has no effect to align the mean values or
     standard deviations of the components to be equal.

     So, a regular expression indicated as \code{[this.]kind} argument may not match
     the new value of \code{[this.]kind} field.
     For example, if you indicate \code{[this.]kind = "Mean-Eq.*Horizontal"} and
     \code{[this.]cmp = data.frame(mean = c(0, 1), sd = c(0.8, 1.2))},
     the new \code{kind} field will be
     \code{"Mean-Differed Sigma-Differed Horizontal Gradational Distribution"},
     which is not matched with indicated regular expression.
     In such a case, a warning will occur.

     On the other hand, when a \code{\link[ggd]{GGD}} object is
     indicated as \code{[this.]kind}, no warning will occur if the new \code{kind} field
     is different from that of the indicated object.
     Indicated object is regarded as just for specifying \code{mix.type} value.

     It is not recommended but if you indicate not-\code{NULL} values for both of
     \code{[this.]kind} and \code{[this.]mix.type} at once,
     \code{[this.]kind} will be ignored.

     If both \code{[this.]kind} and \code{[this.]mix.type} arguments are \code{NULL}
     and \code{grad} argument is \code{"default"},
     the new value of \code{mix.type} field will be decided according to
     number of rows in \code{[this.]cmp} as:
     \itemize{
         \item \code{nrow([this.]cmp) = 0} : \code{mix.type} will be \code{NA}.
         \item \code{nrow([this.]cmp) = 1} : \code{mix.type} will be \code{0}.
         \item \code{nrow([this.]cmp) = 2} : If the current \code{mix.type} field
                                             is in \code{1:3}, it will be retained.
                                             Otherwise, \code{mix.type} will be \code{2}.
         \item \code{nrow([this.]cmp) = 3} : \code{mix.type} will be \code{3}.
         \item \code{nrow([this.]cmp) = 4} : \code{mix.type} will be \code{4}.
     }
     If the number of rows is \code{5} or more,
     \code{mix.type} will not shift to \code{5} but an error will occur.
 }
}
\examples{
 ## Normal Distribution
 a <- ggd.set.cmp( data.frame( mean = 0, sd = 1.5 ) )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## Indicating "normal" for 'grad' argument is allowed. However, in this function,
 ## it works only to assert that 'cmp' represents a normal distribution.
 a <- ggd.set.cmp( data.frame( mean = 1, sd = 2 ), grad = "normal" )
 a$kind; a$mix.type; a$cmp

 ## Where the number of rows in the 'cmp' argument is 2,
 ## it is recommended to indicate 'grad' or 'mix.type' or 'kind' to avoid confusing.

 ## Mean of 2 normal distributions (mix.type = 1)
 ## is not a gradational Gaussian distribution (GDD),
 ## but a kind of Gaussian mixture model (GMM).
 rm( a )
 a <- ggd.set.cmp( data.frame( mean = c( 0, 0 ), sd = c( 1.2, 0.8 ) ),
                   kind = "Mean of.*2 Normal Distributions" )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## Changing to mix.type = 2 : Horizontal Gradational Distribution
 ## while retaining 'cmp' field.
 a$set.cmp( this.mix.type = 2 )
 a$kind; a$mix.type; a$cmp

 ## You can also write as:
 a$set.cmp( grad = "h" )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## kind = 9 : '2-Mean-Equaled Sigma-Differed Vertical Gradational Distribution'
 ##
 ## You can also write as 'this.kind = "2.*Vertical"' or 'this.mix.type = 3' or 'grad = "v2"'
 ## instead of 'this.kind = 9'.
 a$set.cmp( this.kind = 9 )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## You can generate a same kind object with indicating a GGD object for 'kind' argument.
 b <- ggd.set.cmp( data.frame( mean = c( -1, -1 ), sd = c( 1.2, 0.4 ) ), kind = a )
 b$kind; b$mix.type; b$cmp
 plot( seq( -3, 3, 0.01 ), b$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## Indicating 3 components generates a vertical gradation normally.
 a$clear()
 a$set.cmp( data.frame( mean = c( -0.5, 0, 0.5 ), sd = c( 1.2, 0.8, 1.2 ) ) )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## Indicating 4 components generates a horizontal-vertical gradation normally.
 a$set.cmp( data.frame( mean = c( 0, 0, 0, 0 ), sd = c( 0.7, 0.5, 2.0, 1.5 ) ) )
 a$kind; a$mix.type; a$cmp
 plot( seq( -3, 3, 0.01 ), a$d( seq( -3, 3, 0.01 ) ), type = "l" )

 ## If 'cmp' field can be simplified, the number of components is automatically reduced,
 ## and 'mix.type' field follows the reduction.
 a$set.cmp( data.frame( mean = c( 0, 0, 0, 0 ), sd = c( 1, 0.7, 1, 0.7 ) ) )
 a$kind      ## '2-Mean-Equaled Sigma-Differed Vertical Gradational Distribution'
 a$mix.type  ## 3 (not 4)
 a$cmp       ## with 2 rows

 ## If you want not to simplify 'cmp' field,
 ## indicate '[this.]kind' or '[this.]mix.type' or 'grad' argument for the condition.
 a$set.cmp( data.frame( mean = c( 0, 0, 0, 0 ), sd = c( 1, 0.7, 1, 0.7 ) ),
            this.mix.type = 4 )
 a$kind      ## '2-Mean-Equaled Sigma-Differed Vertical Gradational Distribution'
 a$mix.type  ## 4
 a$cmp       ## with 4 rows

 ## You can also write as:
 a$set.cmp( data.frame( mean = c( 0, 0, 0, 0 ), sd = c( 1, 0.7, 1, 0.7 ) ),
            grad = "hv" )
 a$kind; a$mix.type; a$cmp

 ## You can also use '[this.]kind' argument to avoid simplifying.
 ## However, if the indicated regular expression for '[this.]kind' argument does not match
 ## the resulting 'kind' field, a warning will occur.
 ## For avoiding confusing, using '[this.]mix.type' or 'grad' argument is recommended.
 ##
 ## This sample will work with a warning;
 ## because 'this.kind' argument does not match the resulting 'kind' field.
 a$set.cmp(
     this.cmp = data.frame( mean = c( 0, 0, 0, 0 ), sd = c( 1, 0.7, 1, 0.7 ) ),
     this.kind = "Horizontal-Vertical" )
 a$kind; a$mix.type; a$cmp

 ## Using custom distribution (mix.type = 5),
 ## you can create an object of any distribution.
 ##
 ## For a custom distribution, 'custom.d' field must be indicated.
 ## It is not necessary to indicate 'custom.p' field, but it is good to do so if possible.
 a$set.cmp(
     this.cmp = data.frame( mean = c( -0.5, 0, 0.5 ), sd = c( 0.5, 0.75, 1 ) ),
     this.kind = "Custom",
     this.custom.d = function(x, cmp) (dnorm(x, cmp$mean[1], cmp$sd[1]) +
                                       dnorm(x, cmp$mean[2], cmp$sd[2]) +
                                       dnorm(x, cmp$mean[3], cmp$sd[3])) / 3,
     this.custom.p = function(x, cmp) (pnorm(x, cmp$mean[1], cmp$sd[1]) +
                                       pnorm(x, cmp$mean[2], cmp$sd[2]) +
                                       pnorm(x, cmp$mean[3], cmp$sd[3])) / 3 )
 a$kind      ## "Custom Distribution"
 a$mix.type  ## 5
 a$d(0.2) == (dnorm(0.2, -0.5, 0.5) + dnorm(0.2, 0, 0.75) + dnorm(0.2, 0.5, 1)) / 3  ## TRUE
 a$p(0.5) == (pnorm(0.5, -0.5, 0.5) + pnorm(0.5, 0, 0.75) + pnorm(0.5, 0.5, 1)) / 3  ## TRUE
}
